//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace odonto.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NEOODONTOEntities : DbContext
    {
        public NEOODONTOEntities()
            : base("name=NEOODONTOEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ASEGURADORA> ASEGURADORAs { get; set; }
        public virtual DbSet<BANCO> BANCOes { get; set; }
        public virtual DbSet<CITA> CITAs { get; set; }
        public virtual DbSet<CONTRATO> CONTRATOes { get; set; }
        public virtual DbSet<DETALLE_CONTARTO> DETALLE_CONTARTO { get; set; }
        public virtual DbSet<DETALLE_HISTORIAL> DETALLE_HISTORIAL { get; set; }
        public virtual DbSet<DIENTE> DIENTEs { get; set; }
        public virtual DbSet<DIRECCION> DIRECCIONs { get; set; }
        public virtual DbSet<DOCTOR> DOCTORs { get; set; }
        public virtual DbSet<DOCTOR_INTITUCION> DOCTOR_INTITUCION { get; set; }
        public virtual DbSet<DOCTOR_SECRETARIA> DOCTOR_SECRETARIA { get; set; }
        public virtual DbSet<ENFERMEDAD> ENFERMEDADs { get; set; }
        public virtual DbSet<GERENTE> GERENTEs { get; set; }
        public virtual DbSet<HISTORIAL> HISTORIALs { get; set; }
        public virtual DbSet<INSTITUCION> INSTITUCIONs { get; set; }
        public virtual DbSet<MODULO> MODULOes { get; set; }
        public virtual DbSet<PACIENTE> PACIENTEs { get; set; }
        public virtual DbSet<PACIENTE_ASEGURADORA> PACIENTE_ASEGURADORA { get; set; }
        public virtual DbSet<PACIENTE_ENFERMEDAD> PACIENTE_ENFERMEDAD { get; set; }
        public virtual DbSet<PAGO> PAGOes { get; set; }
        public virtual DbSet<PAGO_TIPO> PAGO_TIPO { get; set; }
        public virtual DbSet<RECIBO> RECIBOes { get; set; }
        public virtual DbSet<RELACION_TELEFONO> RELACION_TELEFONO { get; set; }
        public virtual DbSet<ROL> ROLs { get; set; }
        public virtual DbSet<ROL_MODULO> ROL_MODULO { get; set; }
        public virtual DbSet<SECRETARIA> SECRETARIAs { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TELEFONO> TELEFONOes { get; set; }
        public virtual DbSet<TIPOPAGO> TIPOPAGOes { get; set; }
        public virtual DbSet<TRATA_DIENTE> TRATA_DIENTE { get; set; }
        public virtual DbSet<TRATAMIENTO> TRATAMIENTOes { get; set; }
    
        public virtual ObjectResult<ObtenerEnfermedad_Result> ObtenerEnfermedad(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ObtenerEnfermedad_Result>("ObtenerEnfermedad", idParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
